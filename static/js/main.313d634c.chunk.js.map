{"version":3,"sources":["reportWebVitals.ts","theme.ts","components/ActionableImage.tsx","store/game.ts","components/AppImage.tsx","assets/tasks/1/availablenetworks.png","assets/tasks/1/connectedopennetwork.png","assets/tasks/1/connectedsecurenetwork.png","assets/tasks/1/desktopnetworknotconnected.png","assets/tasks/1/pressonopennetwork.png","assets/tasks/1/pressonsecurenetwork.png","assets/tasks/1/typeinpassword.png","game-data/index.ts","game-data/task1.ts","views/QuizGame/index.tsx","views/ToolbarContent/index.tsx","App.tsx","store/index.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","palette","type","useStyles","makeStyles","imgContainer","position","width","background","border","prevClick","x","y","ActionableImage","props","classes","dispatch","useDispatch","className","onClick","e","rect","target","getBoundingClientRect","pos","clientX","left","clientY","top","posPercentage","height","posPercentageOffset","console","info","component","buttons","map","b","i","style","size","slice","createSlice","name","initialState","reducers","setActiveTaskId","state","payload","activeTaskId","id","setActiveScreenId","activeScreenId","gameActions","actions","fromUrl","src","alt","gameTasks","1","description","screens","desktopnetworknotconnected","availablenetworks","pressonsecurenetwork","pressonopennetwork","typeinpassword","connectedopennetwork","connectedsecurenetwork","theme","margin","spacing","btnContainer","QuizGame","gameState","useSelector","game","useState","undefined","gameObj","setGameObj","useEffect","gameItems","Grid","container","item","ToolbarContent","taskDescription","setTaskDescription","activateTaskId","taskData","toString","Object","keys","length","App","ThemeProvider","CssBaseline","AppBar","Toolbar","Container","maxWidth","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById","log"],"mappings":"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","file":"static/js/main.313d634c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import { createMuiTheme } from '@material-ui/core';\r\n\r\nexport default createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});","import { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport { AppDispatch } from '../store';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  imgContainer: {\r\n    position: 'relative',\r\n\r\n    '& > img': {\r\n      width: '100%',\r\n    },\r\n\r\n    '& > button': {\r\n      position: 'absolute',\r\n\r\n      background: 'transparent',\r\n      border: 'none',\r\n    },\r\n  },\r\n}));\r\n\r\n// For debug, while creating tasks.\r\nlet prevClick = { x: 0, y: 0 };\r\n\r\nexport default function ActionableImage(props: {\r\n  component: React.ReactNode;\r\n  buttons: {\r\n    position: { top: number | string; left: number | string };\r\n    size: { width: number | string; height: number | string };\r\n    onClick?: (dispatch: AppDispatch) => void;\r\n  }[];\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleContainerClick = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ) => {\r\n    var rect = (e.target as HTMLElement).getBoundingClientRect();\r\n    const pos = {\r\n      x: e.clientX - rect.left,\r\n      y: e.clientY - rect.top,\r\n    };\r\n\r\n    const posPercentage = {\r\n      x: pos.x / rect.width,\r\n      y: pos.y / rect.height,\r\n    };\r\n\r\n    const posPercentageOffset = {\r\n      x: prevClick.x - posPercentage.x,\r\n      y: prevClick.y - posPercentage.y,\r\n    };\r\n\r\n    prevClick = posPercentage;\r\n\r\n    console.info('Clicked on:', pos, posPercentage, posPercentageOffset);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.imgContainer} onClick={handleContainerClick}>\r\n      {props.component}\r\n      {props.buttons.map((b, i) => {\r\n        return (\r\n          <button\r\n            key={i}\r\n            style={{\r\n              top: b.position.top,\r\n              left: b.position.left,\r\n              width: b.size.width,\r\n              height: b.size.height,\r\n            }}\r\n            onClick={() => {\r\n              if (b.onClick) {\r\n                b.onClick(dispatch);\r\n              }\r\n            }}\r\n          ></button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nconst slice = createSlice({\r\n  name: 'game',\r\n  initialState: {} as {\r\n    activeTaskId?: string | number;\r\n    activeScreenId?: string | number;\r\n  },\r\n  reducers: {\r\n    setActiveTaskId: (\r\n      state,\r\n      { payload }: PayloadAction<{ id?: string | number }>\r\n    ) => {\r\n      state.activeTaskId = payload.id;\r\n    },\r\n    setActiveScreenId: (\r\n      state,\r\n      { payload }: PayloadAction<{ id?: string | number }>\r\n    ) => {\r\n      state.activeScreenId = payload.id;\r\n    },\r\n  },\r\n});\r\n\r\nexport default slice.reducer;\r\nexport const gameActions = slice.actions;\r\n","import React from 'react';\r\n\r\nexport const fromUrl = (src: string) => {\r\n  return AppImage({ src });\r\n};\r\n\r\nexport default function AppImage(props: { src: string }) {\r\n  return <img src={props.src} alt=\"Desktop\" />;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/availablenetworks.1e5b6f9a.png\";","export default __webpack_public_path__ + \"static/media/connectedopennetwork.3add7549.png\";","export default __webpack_public_path__ + \"static/media/connectedsecurenetwork.16346748.png\";","export default __webpack_public_path__ + \"static/media/desktopnetworknotconnected.1d992857.png\";","export default __webpack_public_path__ + \"static/media/pressonopennetwork.218e43b6.png\";","export default __webpack_public_path__ + \"static/media/pressonsecurenetwork.166db23d.png\";","export default __webpack_public_path__ + \"static/media/typeinpassword.c41db31f.png\";","import { AppDispatch } from '../store';\r\nimport task1data from './task1';\r\n\r\nexport interface TaskData {\r\n  screens: {[key: string]: ScreenData};\r\n  description: string;\r\n}\r\n\r\nexport interface ScreenData {\r\n  component: React.ReactNode;\r\n  buttons: {\r\n    position: { top: number | string; left: number | string };\r\n    size: { width: number | string; height: number | string };\r\n    onClick?: (dispatch: AppDispatch) => void;\r\n  }[];\r\n}\r\n\r\nconst gameTasks: { [taskId: string]: TaskData } = {\r\n  1: task1data,\r\n};\r\nexport default gameTasks;\r\n","import { TaskData } from '.';\r\nimport { fromUrl } from '../components/AppImage';\r\nimport { gameActions } from 'store/game';\r\n\r\nimport availablenetworks from 'assets/tasks/1/availablenetworks.png';\r\nimport chooseasprivatenetwork from 'assets/tasks/1/chooseasprivatenetwork.png';\r\nimport chooseaspublicnetwork from 'assets/tasks/1/chooseaspublicnetwork.png';\r\nimport connectedopennetwork from 'assets/tasks/1/connectedopennetwork.png';\r\nimport connectedsecurenetwork from 'assets/tasks/1/connectedsecurenetwork.png';\r\nimport desktopnetworkconnected from 'assets/tasks/1/desktopnetworkconnected.png';\r\nimport desktopnetworknotconnected from 'assets/tasks/1/desktopnetworknotconnected.png';\r\nimport pressonopennetwork from 'assets/tasks/1/pressonopennetwork.png';\r\nimport pressonsecurenetwork from 'assets/tasks/1/pressonsecurenetwork.png';\r\nimport typeinpassword from 'assets/tasks/1/typeinpassword.png';\r\n\r\nconst task1data: TaskData = {\r\n  description:'Description of task 1',\r\n  screens: {\r\n    desktopnetworknotconnected: {\r\n      component: fromUrl(desktopnetworknotconnected),\r\n      buttons: [\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'availablenetworks'}));\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    availablenetworks: {\r\n      component: fromUrl(availablenetworks),\r\n      buttons: [\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n        {\r\n          position: {left: '77%', top: '28%'},\r\n          size: {width: '22%', height: '8%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonopennetwork'}));\r\n          },\r\n        },\r\n        {\r\n          position: {left: '77%', top: '36%'},\r\n          size: {width: '22%', height: '8%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonsecurenetwork'}));\r\n          },\r\n        }\r\n      ],\r\n    },\r\n    pressonsecurenetwork: {\r\n      component: fromUrl(pressonsecurenetwork),\r\n      buttons: [\r\n          //network icon in desktop bar\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n          //connect button\r\n        {\r\n          position: {top: '48.5%', left: '89.5%'},\r\n          size: {width: '9.5%', height: '4%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'typeinpassword'}));\r\n          }\r\n        },\r\n          //open network button\r\n        {\r\n          position: {top: '28.1%', left: '76.4%'},\r\n          size: {width: '24%', height: '8%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonopennetwork'}));\r\n          }\r\n        },\r\n      ]\r\n    },\r\n    pressonopennetwork: {\r\n      component: fromUrl(pressonopennetwork),\r\n      buttons: [\r\n          //network icon in desktop bar\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n          //secure network button\r\n        {\r\n          position: {left: '76.6%', top: '50.9%'},\r\n          size: {width: '24%', height: '8%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonsecurenetwork'}));\r\n          },\r\n        },\r\n          //connect button\r\n        {\r\n          position: {left: '89.5%', top: '45.45%'},\r\n          size: {width: '9.5%', height: '3.5%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id:'connectedopennetwork'}));\r\n          }\r\n        },\r\n      ]\r\n    },\r\n    typeinpassword: {\r\n      component: fromUrl(typeinpassword),\r\n      buttons: [\r\n        //network icon in desktop bar\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n        //open network button\r\n        {\r\n          position: {top: '28.1%', left: '76.4%'},\r\n          size: {width: '24%', height: '8%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonopennetwork'}));\r\n          }\r\n        },\r\n        //next button (after password entered)\r\n        {\r\n          position: {top: '52.1%', left: '79.7%'},\r\n          size: {width: '9.7%', height: '3.8%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'connectedsecurenetwork'}));\r\n          }\r\n        },\r\n      ],\r\n    },\r\n    connectedopennetwork: {\r\n      component:fromUrl(connectedopennetwork),\r\n      buttons:[],\r\n    },\r\n    connectedsecurenetwork: {\r\n      component:fromUrl(connectedsecurenetwork),\r\n      buttons:[],\r\n    }\r\n  }\r\n};\r\n\r\nexport default task1data;\r\n","import { Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React, { useEffect, useState } from 'react';\r\nimport ActionableImage from '../../components/ActionableImage';\r\nimport { AppState } from '../../store';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Buttons from './Buttons';\r\nimport { gameActions } from '../../store/game';\r\nimport gameItems, { ScreenData } from '../../game-data';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  imgContainer: {\r\n    margin: theme.spacing(8, 0, 3),\r\n  },\r\n  btnContainer: {\r\n    margin: theme.spacing(0),\r\n  },\r\n}));\r\n\r\nexport default function QuizGame() {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n  const gameState = useSelector((state: AppState) => state.game);\r\n\r\n  const [gameObj, setGameObj] = useState(undefined as ScreenData | undefined);\r\n\r\n  useEffect(() => {\r\n    dispatch(gameActions.setActiveTaskId({ id: 1 }));\r\n    dispatch(gameActions.setActiveScreenId({ id: 'desktopnetworknotconnected' }));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setGameObj(\r\n      gameState.activeTaskId && gameState.activeScreenId\r\n        ? gameItems[gameState.activeTaskId].screens[gameState.activeScreenId]\r\n        : undefined\r\n    );\r\n  }, [gameState.activeTaskId, gameState.activeScreenId]);\r\n\r\n  if (!gameObj) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item className={classes.imgContainer}>\r\n        <ActionableImage\r\n          component={gameObj.component}\r\n          buttons={gameObj.buttons}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React, { useEffect, useState } from 'react';\r\nimport ActionableImage from '../../components/ActionableImage';\r\nimport { AppState } from '../../store';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { gameActions } from '../../store/game';\r\nimport gameItems, { ScreenData, TaskData } from 'game-data';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  imgContainer: {\r\n    margin: theme.spacing(8, 0, 3),\r\n  },\r\n  btnContainer: {\r\n    margin: theme.spacing(0),\r\n  },\r\n}));\r\n\r\nexport default function ToolbarContent() {\r\n  // const dispatch = useDispatch();\r\n  const gameState = useSelector((state: AppState) => state.game);\r\n\r\n  const [taskDescription, setTaskDescription] = useState('');\r\n\r\n  // useEffect(() => {\r\n  //   dispatch(gameActions.setActiveItemId({ id: 'First' }));\r\n  // }, [dispatch]);\r\n\r\n  const computeTaskDescription = (\r\n    activateTaskId: string | number,\r\n    taskData: TaskData\r\n  ) => {\r\n    const progressIndicator =\r\n        'task ' + activateTaskId.toString() + ' of ' + Object.keys(gameItems).length;\r\n    const description = taskData?.description;\r\n    return progressIndicator + ': ' + description;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTaskDescription(\r\n      gameState.activeTaskId && gameState.activeScreenId\r\n        ? computeTaskDescription(\r\n          gameState.activeTaskId,\r\n            gameItems[gameState.activeTaskId]\r\n          )\r\n        : ''\r\n    );\r\n  }, [gameState.activeTaskId, gameState.activeScreenId]);\r\n\r\n  if (!taskDescription) {\r\n    return null;\r\n  }\r\n\r\n  return <div>{taskDescription}</div>;\r\n}\r\n","import {\r\n  AppBar,\r\n  Container,\r\n  CssBaseline,\r\n  ThemeProvider,\r\n  Toolbar,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport './styles/styles.css';\r\nimport theme from './theme';\r\nimport QuizGame from './views/QuizGame';\r\nimport ToolbarContent from './views/ToolbarContent';\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <ToolbarContent />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth=\"lg\">\r\n        <QuizGame />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction } from '@reduxjs/toolkit';\r\nimport { Action, combineReducers } from 'redux';\r\n\r\nimport game from './game';\r\n\r\nexport const rootReducer = combineReducers({\r\n  game,\r\n});\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type AppThunk = ThunkAction<void, AppState, unknown, Action<string>>;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(console.log);\r\n"],"sourceRoot":""}