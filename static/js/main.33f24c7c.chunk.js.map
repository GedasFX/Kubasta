{"version":3,"sources":["reportWebVitals.ts","theme.ts","components/ActionableImage.tsx","store/game.ts","components/AppImage.tsx","assets/tasks/1/availablenetworks.png","assets/tasks/1/chooseasprivatenetwork.png","game-data/index.ts","game-data/task1.ts","assets/tasks/1/desktopnetworknotconnected.png","views/QuizGame/index.tsx","views/ToolbarContent/index.tsx","App.tsx","store/index.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","palette","type","useStyles","makeStyles","imgContainer","position","width","background","border","prevClick","x","y","ActionableImage","props","classes","dispatch","useDispatch","className","onClick","e","rect","target","getBoundingClientRect","pos","clientX","left","clientY","top","posPercentage","height","posPercentageOffset","console","info","component","buttons","map","b","i","style","size","slice","createSlice","name","initialState","reducers","setActiveTaskId","state","payload","activeTaskId","id","setActiveScreenId","activeScreenId","gameActions","actions","fromUrl","src","alt","gameData","1","desktopnetworknotconnected","description","availablenetworks","window","alert","Second","chooseasprivatenetwork","theme","margin","spacing","btnContainer","QuizGame","gameState","useSelector","game","useState","undefined","gameObj","setGameObj","useEffect","gameItems","Grid","container","item","ToolbarContent","taskDescription","setTaskDescription","activeItemId","toString","Object","keys","length","computeTaskDescription","App","ThemeProvider","CssBaseline","AppBar","Toolbar","Container","maxWidth","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById","log"],"mappings":"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","file":"static/js/main.33f24c7c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { createMuiTheme } from '@material-ui/core';\n\nexport default createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});","import { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { AppDispatch } from '../store';\nimport { useDispatch } from 'react-redux';\n\nconst useStyles = makeStyles(() => ({\n  imgContainer: {\n    position: 'relative',\n\n    '& > img': {\n      width: '100%',\n    },\n\n    '& > button': {\n      position: 'absolute',\n\n      background: 'transparent',\n      border: 'none',\n    },\n  },\n}));\n\n// For debug, while creating tasks.\nlet prevClick = { x: 0, y: 0 };\n\nexport default function ActionableImage(props: {\n  component: React.ReactNode;\n  buttons: {\n    position: { top: number | string; left: number | string };\n    size: { width: number | string; height: number | string };\n    onClick?: (dispatch: AppDispatch) => void;\n  }[];\n}) {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const handleContainerClick = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => {\n    var rect = (e.target as HTMLElement).getBoundingClientRect();\n    const pos = {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top,\n    };\n\n    const posPercentage = {\n      x: pos.x / rect.width,\n      y: pos.y / rect.height,\n    };\n\n    const posPercentageOffset = {\n      x: prevClick.x - posPercentage.x,\n      y: prevClick.y - posPercentage.y,\n    };\n\n    prevClick = posPercentage;\n\n    console.info('Clicked on:', pos, posPercentage, posPercentageOffset);\n  };\n\n  return (\n    <div className={classes.imgContainer} onClick={handleContainerClick}>\n      {props.component}\n      {props.buttons.map((b, i) => {\n        return (\n          <button\n            key={i}\n            style={{\n              top: b.position.top,\n              left: b.position.left,\n              width: b.size.width,\n              height: b.size.height,\n            }}\n            onClick={() => {\n              if (b.onClick) {\n                b.onClick(dispatch);\n              }\n            }}\n          ></button>\n        );\n      })}\n    </div>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nconst slice = createSlice({\n  name: 'game',\n  initialState: {} as {\n    activeTaskId?: string | number;\n    activeScreenId?: string | number;\n  },\n  reducers: {\n    setActiveTaskId: (\n      state,\n      { payload }: PayloadAction<{ id?: string | number }>\n    ) => {\n      state.activeTaskId = payload.id;\n    },\n    setActiveScreenId: (\n      state,\n      { payload }: PayloadAction<{ id?: string | number }>\n    ) => {\n      state.activeScreenId = payload.id;\n    },\n  },\n});\n\nexport default slice.reducer;\nexport const gameActions = slice.actions;\n","import React from 'react';\n\nexport const fromUrl = (src: string) => {\n  return AppImage({ src });\n};\n\nexport default function AppImage(props: { src: string }) {\n  return <img src={props.src} alt=\"Desktop\" />;\n}\n","export default __webpack_public_path__ + \"static/media/availablenetworks.1e5b6f9a.png\";","export default __webpack_public_path__ + \"static/media/chooseasprivatenetwork.d79c0bc3.png\";","import { AppDispatch } from '../store';\nimport task1data from './task1';\n\nexport interface TaskData {\n  [key: string]: GameObject;\n}\n\nexport interface GameObject {\n  component: React.ReactNode;\n  description: string;\n  buttons: {\n    position: { top: number | string; left: number | string };\n    size: { width: number | string; height: number | string };\n    onClick?: (dispatch: AppDispatch) => void;\n  }[];\n}\n\nconst gameData: { [taskId: string]: TaskData } = {\n  1: task1data,\n};\nexport default gameData;\n","import { TaskData } from '.';\nimport { fromUrl } from '../components/AppImage';\nimport { gameActions } from 'store/game';\n\nimport availablenetworks from 'assets/tasks/1/availablenetworks.png';\nimport chooseasprivatenetwork from 'assets/tasks/1/chooseasprivatenetwork.png';\nimport chooseaspublicnetwork from 'assets/tasks/1/chooseaspublicnetwork.png';\nimport connectedopennetwork from 'assets/tasks/1/connectedopennetwork.png';\nimport connectedsecurenetwork from 'assets/tasks/1/connectedsecurenetwork.png';\nimport desktopnetworkconnected from 'assets/tasks/1/desktopnetworkconnected.png';\nimport desktopnetworknotconnected from 'assets/tasks/1/desktopnetworknotconnected.png';\nimport pressonopennetwork from 'assets/tasks/1/pressonopennetwork.png';\nimport pressonsecurenetwork from 'assets/tasks/1/pressonsecurenetwork.png';\nimport typeinpassword from 'assets/tasks/1/typeinpassword.png';\n\nconst task1data: TaskData = {\n  desktopnetworknotconnected: {\n    component: fromUrl(desktopnetworknotconnected),\n    description: '',\n    buttons: [\n      {\n        position: { left: '92%', top: '94.5%' },\n        size: { width: '2%', height: '4%' },\n        onClick: (dispatch) => {\n          dispatch(gameActions.setActiveScreenId({ id: 'availablenetworks' }));\n        },\n      },\n    ],\n  },\n  availablenetworks: {\n    component: fromUrl(availablenetworks),\n    description: 'Task description 1',\n    buttons: [\n      {\n        position: { top: '10%', left: '10%' },\n        size: { width: '20%', height: '20%' },\n        onClick: (dispatch) => {\n          dispatch(gameActions.setActiveScreenId({ id: 'Second' }));\n        },\n      },\n      {\n        position: { top: '40%', left: '10%' },\n        size: { width: '20%', height: '20%' },\n        onClick: () => window.alert('Congratulations'),\n      },\n      {\n        position: { left: '92%', top: '94.5%' },\n        size: { width: '2%', height: '4%' },\n        onClick: (dispatch) => {\n          dispatch(gameActions.setActiveScreenId({ id: 'desktopnetworknotconnected' }));\n        },\n      },\n    ],\n  },\n  Second: {\n    component: fromUrl(chooseasprivatenetwork),\n    description: 'Task description 2',\n    buttons: [\n      {\n        position: { top: '10%', left: '10%' },\n        size: { width: '20%', height: '20%' },\n        onClick: (dispatch) => {\n          dispatch(gameActions.setActiveScreenId({ id: 'First' }));\n        },\n      },\n      {\n        position: { top: '40%', left: '10%' },\n        size: { width: '20%', height: '20%' },\n        onClick: () => window.alert('Not congratulations'),\n      },\n    ],\n  },\n};\n\nexport default task1data;\n","export default __webpack_public_path__ + \"static/media/desktopnetworknotconnected.1d992857.png\";","import { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from 'react';\nimport ActionableImage from '../../components/ActionableImage';\nimport { AppState } from '../../store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Buttons from './Buttons';\nimport { gameActions } from '../../store/game';\nimport gameItems, { GameObject } from '../../game-data';\n\nconst useStyles = makeStyles((theme) => ({\n  imgContainer: {\n    margin: theme.spacing(8, 0, 3),\n  },\n  btnContainer: {\n    margin: theme.spacing(0),\n  },\n}));\n\nexport default function QuizGame() {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const gameState = useSelector((state: AppState) => state.game);\n\n  const [gameObj, setGameObj] = useState(undefined as GameObject | undefined);\n\n  useEffect(() => {\n    dispatch(gameActions.setActiveTaskId({ id: 1 }));\n    dispatch(gameActions.setActiveScreenId({ id: 'desktopnetworknotconnected' }));\n  }, [dispatch]);\n\n  useEffect(() => {\n    setGameObj(\n      gameState.activeTaskId && gameState.activeScreenId\n        ? gameItems[gameState.activeTaskId][gameState.activeScreenId]\n        : undefined\n    );\n  }, [gameState.activeTaskId, gameState.activeScreenId]);\n\n  if (!gameObj) {\n    return null;\n  }\n\n  return (\n    <Grid container>\n      <Grid item className={classes.imgContainer}>\n        <ActionableImage\n          component={gameObj.component}\n          buttons={gameObj.buttons}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n","import { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from 'react';\nimport ActionableImage from '../../components/ActionableImage';\nimport { AppState } from '../../store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { gameActions } from '../../store/game';\nimport gameItems, { GameObject, TaskData } from 'game-data';\n\nconst useStyles = makeStyles((theme) => ({\n  imgContainer: {\n    margin: theme.spacing(8, 0, 3),\n  },\n  btnContainer: {\n    margin: theme.spacing(0),\n  },\n}));\n\nexport default function ToolbarContent() {\n  // const dispatch = useDispatch();\n  const gameState = useSelector((state: AppState) => state.game);\n\n  const [taskDescription, setTaskDescription] = useState('');\n\n  // useEffect(() => {\n  //   dispatch(gameActions.setActiveItemId({ id: 'First' }));\n  // }, [dispatch]);\n\n  const computeTaskDescription = (\n    activeItemId: string | number,\n    gameItems: TaskData\n  ) => {\n    const progressIndicator =\n      activeItemId.toString() + ' task of ' + Object.keys(gameItems).length;\n    const description = gameItems[activeItemId]?.description;\n    return progressIndicator + ': ' + description;\n  };\n\n  useEffect(() => {\n    setTaskDescription(\n      gameState.activeTaskId && gameState.activeScreenId\n        ? computeTaskDescription(\n            gameState.activeScreenId,\n            gameItems[gameState.activeTaskId]\n          )\n        : ''\n    );\n  }, [gameState.activeTaskId, gameState.activeScreenId]);\n\n  if (!taskDescription) {\n    return null;\n  }\n\n  return <div>{taskDescription}</div>;\n}\n","import {\n  AppBar,\n  Container,\n  CssBaseline,\n  ThemeProvider,\n  Toolbar,\n} from '@material-ui/core';\nimport React from 'react';\nimport './styles/styles.css';\nimport theme from './theme';\nimport QuizGame from './views/QuizGame';\nimport ToolbarContent from './views/ToolbarContent';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <ToolbarContent />\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"md\">\n        <QuizGame />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport { Action, combineReducers } from 'redux';\n\nimport game from './game';\n\nexport const rootReducer = combineReducers({\n  game,\n});\nexport type AppState = ReturnType<typeof rootReducer>;\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type AppThunk = ThunkAction<void, AppState, unknown, Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}