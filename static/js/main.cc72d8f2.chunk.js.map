{"version":3,"sources":["reportWebVitals.ts","theme.ts","components/ActionableImage.tsx","store/game.ts","components/AppImage.tsx","assets/tasks/1/availablenetworks.png","assets/tasks/1/connectedopennetwork.png","assets/tasks/1/connectedsecurenetwork.png","assets/tasks/1/discoverableonnetwork.png","assets/tasks/1/desktopnetworknotconnected.png","assets/tasks/1/pressonopennetwork.png","assets/tasks/1/pressonsecurenetwork.png","assets/tasks/1/typeinpassword.png","game-data/index.ts","game-data/task1.ts","game-data/task2.ts","assets/tasks/2/antiviruspopup.png","components/FeedbackDialog.tsx","components/Stepper.tsx","components/ProgressBar.tsx","views/QuizGame/index.tsx","components/Toolbar.tsx","App.tsx","store/index.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","palette","type","useStyles","makeStyles","imgContainer","position","width","background","border","prevClick","x","y","ActionableImage","props","classes","dispatch","useDispatch","className","onClick","e","rect","target","getBoundingClientRect","pos","clientX","left","clientY","top","posPercentage","height","posPercentageOffset","console","info","component","buttons","map","b","i","style","size","slice","createSlice","name","initialState","reducers","setActiveTaskId","state","payload","activeTaskId","id","setActiveScreenId","activeScreenId","toggleFeedbackDialog","showFeedbackDialog","setFeedbackDialogText","feedbackText","text","updatePoints","log","points","initializePoints","gameActions","actions","fromUrl","src","alt","gameTasks","1","title","description","screens","desktopnetworknotconnected","availablenetworks","pressonsecurenetwork","pressonopennetwork","POINTS_WRONG_ANSWER","typeinpassword","connectedopennetwork","connectedsecurenetwork","discoverableonnetwork","window","alert","2","antiviruspopup","DialogTitle","disableTypography","Typography","variant","FeedbackDialog","gameState","useSelector","game","Dialog","open","DialogActions","Button","autoFocus","color","VerticalStepper","React","useState","activeStep","setActiveStep","steps","Object","keys","gameItems","sort","useEffect","parseInt","toString","Stepper","orientation","label","index","Step","StepLabel","StepContent","step","BorderLinearProgress","withStyles","theme","root","borderRadius","colorPrimary","backgroundColor","grey","bar","LinearProgress","CustomizedProgressBar","progress","setProgress","value","margin","spacing","btnContainer","QuizGame","undefined","screenData","setScreenData","Grid","container","item","xs","ToolbarContent","taskDescription","setTaskDescription","activateTaskId","taskData","length","App","ThemeProvider","CssBaseline","AppBar","Toolbar","Container","maxWidth","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc72d8f2.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import { createMuiTheme } from '@material-ui/core';\r\n\r\nexport default createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});","import { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport { AppDispatch } from '../store';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  imgContainer: {\r\n    position: 'relative',\r\n\r\n    '& > img': {\r\n      width: '100%',\r\n    },\r\n\r\n    '& > button': {\r\n      position: 'absolute',\r\n\r\n      background: 'transparent',\r\n      border: 'none',\r\n    },\r\n  },\r\n}));\r\n\r\n// For debug, while creating tasks.\r\nlet prevClick = { x: 0, y: 0 };\r\n\r\nexport default function ActionableImage(props: {\r\n  component: React.ReactNode;\r\n  buttons: {\r\n    position: { top: number | string; left: number | string };\r\n    size: { width: number | string; height: number | string };\r\n    onClick?: (dispatch: AppDispatch) => void;\r\n  }[];\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleContainerClick = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ) => {\r\n    var rect = (e.target as HTMLElement).getBoundingClientRect();\r\n    const pos = {\r\n      x: e.clientX - rect.left,\r\n      y: e.clientY - rect.top,\r\n    };\r\n\r\n    const posPercentage = {\r\n      x: pos.x / rect.width,\r\n      y: pos.y / rect.height,\r\n    };\r\n\r\n    const posPercentageOffset = {\r\n      x: prevClick.x - posPercentage.x,\r\n      y: prevClick.y - posPercentage.y,\r\n    };\r\n\r\n    prevClick = posPercentage;\r\n\r\n    console.info('Clicked on:', pos, posPercentage, posPercentageOffset);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.imgContainer} onClick={handleContainerClick}>\r\n      {props.component}\r\n      {props.buttons.map((b, i) => {\r\n        return (\r\n          <button\r\n            key={i}\r\n            style={{\r\n              top: b.position.top,\r\n              left: b.position.left,\r\n              width: b.size.width,\r\n              height: b.size.height,\r\n            }}\r\n            onClick={() => {\r\n              if (b.onClick) {\r\n                b.onClick(dispatch);\r\n              }\r\n            }}\r\n          ></button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nconst slice = createSlice({\r\n  name: 'game',\r\n  initialState: {} as {\r\n    activeTaskId?: string | number;\r\n    activeScreenId?: string | number;\r\n    showFeedbackDialog?: boolean;\r\n    points:number;\r\n    feedbackText:string;\r\n  },\r\n  reducers: {\r\n    setActiveTaskId: (\r\n      state,\r\n      { payload }: PayloadAction<{ id?: string | number }>\r\n    ) => {\r\n      state.activeTaskId = payload.id;\r\n    },\r\n    setActiveScreenId: (\r\n      state,\r\n      { payload }: PayloadAction<{ id?: string | number }>\r\n    ) => {\r\n      state.activeScreenId = payload.id;\r\n    },\r\n    toggleFeedbackDialog: (\r\n        state,\r\n\r\n    ) => {\r\n      state.showFeedbackDialog = !state.showFeedbackDialog;\r\n    },\r\n    setFeedbackDialogText: (\r\n        state,\r\n        {payload}: PayloadAction<{text:string}>\r\n    ) => {\r\n      state.feedbackText = payload.text;\r\n    },\r\n    updatePoints: (\r\n        state,\r\n        {payload}: PayloadAction<{points:number}>\r\n    ) => {\r\n      console.log('state points: ' + state.points)\r\n      state.points = state.points + payload.points;\r\n    },\r\n    initializePoints:(\r\n        state,\r\n    ) => {\r\n      state.points = 150;\r\n    },\r\n  },\r\n});\r\n\r\nexport default slice.reducer;\r\nexport const gameActions = slice.actions;\r\n","import React from 'react';\r\n\r\nexport const fromUrl = (src: string) => {\r\n  return AppImage({ src });\r\n};\r\n\r\nexport default function AppImage(props: { src: string }) {\r\n  return <img src={props.src} alt=\"Desktop\" />;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/availablenetworks.1e5b6f9a.png\";","export default __webpack_public_path__ + \"static/media/connectedopennetwork.3add7549.png\";","export default __webpack_public_path__ + \"static/media/connectedsecurenetwork.16346748.png\";","export default __webpack_public_path__ + \"static/media/discoverableonnetwork.f641c86c.png\";","export default __webpack_public_path__ + \"static/media/desktopnetworknotconnected.1d992857.png\";","export default __webpack_public_path__ + \"static/media/pressonopennetwork.218e43b6.png\";","export default __webpack_public_path__ + \"static/media/pressonsecurenetwork.166db23d.png\";","export default __webpack_public_path__ + \"static/media/typeinpassword.c41db31f.png\";","import { AppDispatch } from '../store';\r\nimport task1data from './task1';\r\nimport task2data from './task2';\r\n\r\nexport interface TaskData {\r\n  title:string;\r\n  screens: {[key: string]: ScreenData};\r\n  description: string;\r\n}\r\n\r\nexport interface ScreenData {\r\n  component: React.ReactNode;\r\n  buttons: {\r\n    position: { top: number | string; left: number | string };\r\n    size: { width: number | string; height: number | string };\r\n    onClick?: (dispatch: AppDispatch) => void;\r\n  }[];\r\n}\r\n\r\nconst gameTasks: { [taskId: string]: TaskData } = {\r\n  1: task1data,\r\n  2: task2data\r\n};\r\nexport default gameTasks;\r\nexport const POINTS_WRONG_ANSWER=-30;\r\n","import { TaskData } from '.';\r\nimport { fromUrl } from '../components/AppImage';\r\nimport { gameActions } from 'store/game';\r\nimport {POINTS_WRONG_ANSWER} from './';\r\n\r\nimport availablenetworks from 'assets/tasks/1/availablenetworks.png';\r\nimport connectedopennetwork from 'assets/tasks/1/connectedopennetwork.png';\r\nimport connectedsecurenetwork from 'assets/tasks/1/connectedsecurenetwork.png';\r\nimport discoverableonnetwork from 'assets/tasks/1/discoverableonnetwork.png';\r\nimport desktopnetworknotconnected from 'assets/tasks/1/desktopnetworknotconnected.png';\r\nimport pressonopennetwork from 'assets/tasks/1/pressonopennetwork.png';\r\nimport pressonsecurenetwork from 'assets/tasks/1/pressonsecurenetwork.png';\r\nimport typeinpassword from 'assets/tasks/1/typeinpassword.png';\r\n\r\nconst task1data: TaskData = {\r\n  title:'Internet Connection',\r\n  description:'Connect safely to the internet',\r\n  screens: {\r\n    desktopnetworknotconnected: {\r\n      component: fromUrl(desktopnetworknotconnected),\r\n      buttons: [\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'availablenetworks'}));\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    availablenetworks: {\r\n      component: fromUrl(availablenetworks),\r\n      buttons: [\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n        {\r\n          position: {left: '77%', top: '28%'},\r\n          size: {width: '22%', height: '8%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonopennetwork'}));\r\n          },\r\n        },\r\n        {\r\n          position: {left: '77%', top: '36%'},\r\n          size: {width: '22%', height: '8%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonsecurenetwork'}));\r\n          },\r\n        }\r\n      ],\r\n    },\r\n    pressonsecurenetwork: {\r\n      component: fromUrl(pressonsecurenetwork),\r\n      buttons: [\r\n          //network icon in desktop bar\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n          //connect button\r\n        {\r\n          position: {top: '48.5%', left: '89.5%'},\r\n          size: {width: '9.5%', height: '4%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'typeinpassword'}));\r\n          }\r\n        },\r\n          //open network button\r\n        {\r\n          position: {top: '28.1%', left: '76.4%'},\r\n          size: {width: '24%', height: '8%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonopennetwork'}));\r\n          }\r\n        },\r\n      ]\r\n    },\r\n    pressonopennetwork: {\r\n      component: fromUrl(pressonopennetwork),\r\n      buttons: [\r\n          //network icon in desktop bar\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n          //secure network button\r\n        {\r\n          position: {left: '76.6%', top: '50.9%'},\r\n          size: {width: '24%', height: '8%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonsecurenetwork'}));\r\n          },\r\n        },\r\n          //connect button\r\n        {\r\n          position: {left: '89.5%', top: '45.45%'},\r\n          size: {width: '9.5%', height: '3.5%'},\r\n          onClick: (dispatch) => {\r\n            const feedbackText = \"Oh no! Open networks should be avoided whenever possible. Accessing sensitive information on such networks can result in that data getting compromised, e.g. login data to your banking. If given the choice, it is usually better to connect to a secured network.\";\r\n\r\n            dispatch(gameActions.updatePoints({points:POINTS_WRONG_ANSWER}));\r\n            dispatch(gameActions.setActiveScreenId({id:'connectedopennetwork'}));\r\n            dispatch(gameActions.setFeedbackDialogText({text:feedbackText}));\r\n            dispatch(gameActions.toggleFeedbackDialog());\r\n            console.log('pressed on open button')\r\n          }\r\n        },\r\n      ]\r\n    },\r\n    typeinpassword: {\r\n      component: fromUrl(typeinpassword),\r\n      buttons: [\r\n        //network icon in desktop bar\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n        //open network button\r\n        {\r\n          position: {top: '28.1%', left: '76.4%'},\r\n          size: {width: '24%', height: '8%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonopennetwork'}));\r\n          }\r\n        },\r\n        //next button (after password entered)\r\n        {\r\n          position: {top: '52.1%', left: '79.7%'},\r\n          size: {width: '9.7%', height: '3.8%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'discoverableonnetwork'}));\r\n          }\r\n        },\r\n      ],\r\n    },\r\n    connectedopennetwork: {\r\n      component:fromUrl(connectedopennetwork),\r\n      buttons:[\r\n        //secure network button\r\n        {\r\n          position: {left: '76.6%', top: '46.17%'},\r\n          size: {width: '24%', height: '8%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonsecurenetwork'}));\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    connectedsecurenetwork: {\r\n      component:fromUrl(connectedsecurenetwork),\r\n      buttons:[],\r\n    },\r\n    discoverableonnetwork: {\r\n      component:fromUrl(discoverableonnetwork),\r\n      buttons:[\r\n        {\r\n          position: {top: '59%', left: '79.7%'},\r\n          size: {width: '9.7%', height: '3.8%'},\r\n          onClick:(dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'connectedsecurenetwork'}));\r\n            dispatch(gameActions.toggleFeedbackDialog());\r\n          }\r\n        },\r\n        {\r\n          position: {top: '59%', left: '89.5%'},\r\n          size: {width: '9.7%', height: '3.8%'},\r\n          onClick:() => {window.alert('fail')}\r\n        }\r\n      ]\r\n    }\r\n  }\r\n};\r\n\r\nexport default task1data;\r\n","import {TaskData} from \"./index\";\nimport {fromUrl} from \"../components/AppImage\";\nimport antiviruspopup from \"../assets/tasks/2/antiviruspopup.png\";\n\nconst task2data: TaskData = {\n    title:'Antivirus',\n    description:'Deal appropriately with default antivirus',\n    screens: {\n        antiviruspopup: {\n            component: fromUrl(antiviruspopup),\n            buttons: [\n                // {\n                //     position: {left: '92%', top: '94.5%'},\n                //     size: {width: '2%', height: '4%'},\n                //     onClick: (dispatch) => {\n                //         dispatch(gameActions.setActiveScreenId({id: 'availablenetworks'}));\n                //     },\n                // },\n            ],\n        },\n    }\n}\nexport default task2data;","export default __webpack_public_path__ + \"static/media/antiviruspopup.98332630.png\";","import React, {useState} from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {AppDispatch, AppState} from '../store';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {gameActions} from \"../store/game\";\n\nconst DialogTitle = (props: {\n  text:string;\n  onConfirmation?: (dispatch: AppDispatch) => void;\n}) => {\n  return (\n      <MuiDialogTitle disableTypography className=\"MuiTypography-root MuiTypography-h6\" >\n        <Typography variant=\"h6\">{props.text}</Typography>\n      </MuiDialogTitle>\n  );\n};\n\nexport default function FeedbackDialog() {\n  const dispatch = useDispatch();\n  const gameState = useSelector((state: AppState) => state.game);\n  const onConfirmation = function() {\n      dispatch(gameActions.toggleFeedbackDialog())\n      dispatch(gameActions.setActiveTaskId({id: 2}));\n      dispatch(gameActions.setActiveScreenId({id: 'antiviruspopup'}));\n\n  }\n  return (\n    <div>\n      <Dialog open={gameState.showFeedbackDialog ? gameState.showFeedbackDialog : false}>\n        <DialogTitle text={gameState.feedbackText}></DialogTitle>\n          <DialogActions>\n              <Button autoFocus onClick={onConfirmation} color=\"primary\">\n                 Go to next task\n              </Button>\n          </DialogActions>\n      </Dialog>\n\n    </div>\n  );\n}\n","import React, {useEffect} from 'react';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport gameItems, { ScreenData, TaskData } from 'game-data';\nimport Typography from '@material-ui/core/Typography';\nimport {useSelector} from \"react-redux\";\nimport {AppState} from \"../store\";\n\nfunction getSteps() {\n  const keys = Object.keys(gameItems).sort();\n  return keys.map(x => gameItems[x].title);\n}\n\nfunction getStepContent(step:number) {\n  return gameItems[step+1] ? gameItems[step+1].description : '';\n}\n\nexport default function VerticalStepper() {\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n\n  const gameState = useSelector((state: AppState) => state.game);\n  useEffect(() => {\n    let activeTaskId = gameState.activeTaskId ? gameState.activeTaskId : -1;\n    activeTaskId = parseInt(activeTaskId.toString());\n    console.log(activeTaskId)\n    if (activeTaskId != -1) {\n      setActiveStep(activeTaskId-1);\n    }\n\n  }, [gameState.activeTaskId,]);\n  return (\n      <div>\n        <Stepper activeStep={activeStep} orientation=\"vertical\">\n          {steps.map((label, index) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n                <StepContent>\n                  <Typography>{getStepContent(index)}</Typography>\n                </StepContent>\n              </Step>\n          ))}\n        </Stepper>\n      </div>\n  );\n\n}\n","import React, {useEffect} from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport {useSelector} from \"react-redux\";\nimport {AppState} from \"../store\";\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: '#1a90ff',\n  },\n}))(LinearProgress);\n\nexport default function CustomizedProgressBar() {\n  const [progress, setProgress] = React.useState(50);\n  const gameState = useSelector((state: AppState) => state.game);\n  useEffect(() => {\n    const progress = (gameState.points / 300) * 100;\n    setProgress(progress);\n  }, [gameState.points]);\n  return (\n      <div >\n        <BorderLinearProgress variant=\"determinate\" value={progress} />\n      </div>\n  );\n}","import { Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React, { useEffect, useState } from 'react';\r\nimport ActionableImage from '../../components/ActionableImage';\r\nimport { AppState } from '../../store';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Buttons from './Buttons';\r\nimport { gameActions } from '../../store/game';\r\nimport gameItems, { ScreenData } from '../../game-data';\r\nimport FeedbackDialog from \"../../components/FeedbackDialog\";\r\nimport VerticalStepper from \"../../components/Stepper\";\r\nimport CustomizedProgressBar from \"../../components/ProgressBar\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  imgContainer: {\r\n    margin: theme.spacing(8, 0, 3),\r\n  },\r\n  btnContainer: {\r\n    margin: theme.spacing(0),\r\n  },\r\n}));\r\n\r\nexport default function QuizGame() {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n  const gameState = useSelector((state: AppState) => state.game);\r\n\r\n  const [screenData, setScreenData] = useState(undefined as ScreenData | undefined);\r\n\r\n  useEffect(() => {\r\n    dispatch(gameActions.setActiveTaskId({ id: 1 }));\r\n    dispatch(gameActions.setActiveScreenId({ id: 'desktopnetworknotconnected' }));\r\n    dispatch(gameActions.initializePoints());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setScreenData(\r\n      gameState.activeTaskId && gameState.activeScreenId\r\n        ? gameItems[gameState.activeTaskId].screens[gameState.activeScreenId]\r\n        : undefined\r\n    );\r\n  }, [gameState.activeTaskId, gameState.activeScreenId]);\r\n\r\n  if (!screenData) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={12}>\r\n        <CustomizedProgressBar></CustomizedProgressBar>\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <VerticalStepper></VerticalStepper>\r\n      </Grid>\r\n      <Grid item xs={10} className={classes.imgContainer}>\r\n        <ActionableImage\r\n          component={screenData.component}\r\n          buttons={screenData.buttons}\r\n        />\r\n        <FeedbackDialog></FeedbackDialog>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from 'react';\nimport ActionableImage from './ActionableImage';\nimport { AppState } from '../store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { gameActions } from '../store/game';\nimport gameItems, { ScreenData, TaskData } from 'game-data';\n\nconst useStyles = makeStyles((theme) => ({\n  imgContainer: {\n    margin: theme.spacing(8, 0, 3),\n  },\n  btnContainer: {\n    margin: theme.spacing(0),\n  },\n}));\n\nexport default function ToolbarContent() {\n  // const dispatch = useDispatch();\n  const gameState = useSelector((state: AppState) => state.game);\n\n  const [taskDescription, setTaskDescription] = useState('');\n\n  const computeTaskDescription = (\n    activateTaskId: string | number,\n    taskData: TaskData\n  ) => {\n    const progressIndicator =\n        'task ' +\n        activateTaskId.toString() + ' of ' + Object.keys(gameItems).length;\n    const description = taskData?.description;\n    return progressIndicator + ': ' + description;\n  };\n\n  useEffect(() => {\n    setTaskDescription(\n      gameState.activeTaskId && gameState.activeScreenId\n        ? computeTaskDescription(\n          gameState.activeTaskId,\n            gameItems[gameState.activeTaskId]\n          )\n        : ''\n    );\n  }, [gameState.activeTaskId, gameState.activeScreenId]);\n\n  if (!taskDescription) {\n    return null;\n  }\n\n  return <div>{taskDescription}</div>;\n}\n","import {\r\n  AppBar,\r\n  Container,\r\n  CssBaseline,\r\n  ThemeProvider,\r\n  Toolbar,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport './styles/styles.css';\r\nimport theme from './theme';\r\nimport QuizGame from './views/QuizGame';\r\nimport ToolbarContent from './components/Toolbar';\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <ToolbarContent />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth=\"lg\">\r\n        <QuizGame />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction } from '@reduxjs/toolkit';\r\nimport { Action, combineReducers } from 'redux';\r\n\r\nimport game from './game';\r\n\r\nexport const rootReducer = combineReducers({\r\n  game,\r\n});\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type AppThunk = ThunkAction<void, AppState, unknown, Action<string>>;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(console.log);\r\n"],"sourceRoot":""}