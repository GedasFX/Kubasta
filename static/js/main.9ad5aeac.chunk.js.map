{"version":3,"sources":["reportWebVitals.ts","theme.ts","components/ActionableImage.tsx","store/game.ts","components/AppImage.tsx","assets/tasks/1/availablenetworks.png","assets/tasks/1/connectedopennetwork.png","assets/tasks/1/connectedsecurenetwork.png","assets/tasks/1/discoverableonnetwork.png","assets/tasks/1/desktopnetworknotconnected.png","assets/tasks/1/pressonopennetwork.png","assets/tasks/1/pressonsecurenetwork.png","assets/tasks/1/typeinpassword.png","game-data/index.ts","game-data/task1.ts","game-data/task2.ts","assets/tasks/2/antiviruspopup.png","components/FeedbackDialog.tsx","components/Stepper.tsx","views/QuizGame/index.tsx","components/Toolbar.tsx","App.tsx","store/index.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","palette","type","useStyles","makeStyles","imgContainer","position","width","background","border","prevClick","x","y","ActionableImage","props","classes","dispatch","useDispatch","className","onClick","e","rect","target","getBoundingClientRect","pos","clientX","left","clientY","top","posPercentage","height","posPercentageOffset","console","info","component","buttons","map","b","i","style","size","slice","createSlice","name","initialState","reducers","setActiveTaskId","state","payload","activeTaskId","id","setActiveScreenId","activeScreenId","toggleFeedbackDialog","showFeedbackDialog","gameActions","actions","fromUrl","src","alt","gameTasks","1","title","description","screens","desktopnetworknotconnected","availablenetworks","pressonsecurenetwork","pressonopennetwork","typeinpassword","connectedopennetwork","connectedsecurenetwork","discoverableonnetwork","window","alert","2","antiviruspopup","DialogTitle","disableTypography","Typography","variant","text","FeedbackDialog","gameState","useSelector","game","Dialog","open","DialogActions","Button","autoFocus","color","VerticalStepper","React","useState","activeStep","setActiveStep","steps","Object","keys","gameItems","sort","useEffect","parseInt","toString","log","Stepper","orientation","label","index","Step","StepLabel","StepContent","step","theme","margin","spacing","btnContainer","QuizGame","undefined","screenData","setScreenData","Grid","container","item","xs","ToolbarContent","taskDescription","setTaskDescription","activateTaskId","taskData","length","App","ThemeProvider","CssBaseline","AppBar","Toolbar","Container","maxWidth","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ad5aeac.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import { createMuiTheme } from '@material-ui/core';\r\n\r\nexport default createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});","import { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport { AppDispatch } from '../store';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  imgContainer: {\r\n    position: 'relative',\r\n\r\n    '& > img': {\r\n      width: '100%',\r\n    },\r\n\r\n    '& > button': {\r\n      position: 'absolute',\r\n\r\n      background: 'transparent',\r\n      border: 'none',\r\n    },\r\n  },\r\n}));\r\n\r\n// For debug, while creating tasks.\r\nlet prevClick = { x: 0, y: 0 };\r\n\r\nexport default function ActionableImage(props: {\r\n  component: React.ReactNode;\r\n  buttons: {\r\n    position: { top: number | string; left: number | string };\r\n    size: { width: number | string; height: number | string };\r\n    onClick?: (dispatch: AppDispatch) => void;\r\n  }[];\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleContainerClick = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ) => {\r\n    var rect = (e.target as HTMLElement).getBoundingClientRect();\r\n    const pos = {\r\n      x: e.clientX - rect.left,\r\n      y: e.clientY - rect.top,\r\n    };\r\n\r\n    const posPercentage = {\r\n      x: pos.x / rect.width,\r\n      y: pos.y / rect.height,\r\n    };\r\n\r\n    const posPercentageOffset = {\r\n      x: prevClick.x - posPercentage.x,\r\n      y: prevClick.y - posPercentage.y,\r\n    };\r\n\r\n    prevClick = posPercentage;\r\n\r\n    console.info('Clicked on:', pos, posPercentage, posPercentageOffset);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.imgContainer} onClick={handleContainerClick}>\r\n      {props.component}\r\n      {props.buttons.map((b, i) => {\r\n        return (\r\n          <button\r\n            key={i}\r\n            style={{\r\n              top: b.position.top,\r\n              left: b.position.left,\r\n              width: b.size.width,\r\n              height: b.size.height,\r\n            }}\r\n            onClick={() => {\r\n              if (b.onClick) {\r\n                b.onClick(dispatch);\r\n              }\r\n            }}\r\n          ></button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nconst slice = createSlice({\r\n  name: 'game',\r\n  initialState: {} as {\r\n    activeTaskId?: string | number;\r\n    activeScreenId?: string | number;\r\n    showFeedbackDialog?: boolean;\r\n  },\r\n  reducers: {\r\n    setActiveTaskId: (\r\n      state,\r\n      { payload }: PayloadAction<{ id?: string | number }>\r\n    ) => {\r\n      state.activeTaskId = payload.id;\r\n    },\r\n    setActiveScreenId: (\r\n      state,\r\n      { payload }: PayloadAction<{ id?: string | number }>\r\n    ) => {\r\n      state.activeScreenId = payload.id;\r\n    },\r\n    toggleFeedbackDialog: (\r\n        state,\r\n\r\n    ) => {\r\n      state.showFeedbackDialog = !state.showFeedbackDialog;\r\n    },\r\n  },\r\n});\r\n\r\nexport default slice.reducer;\r\nexport const gameActions = slice.actions;\r\n","import React from 'react';\r\n\r\nexport const fromUrl = (src: string) => {\r\n  return AppImage({ src });\r\n};\r\n\r\nexport default function AppImage(props: { src: string }) {\r\n  return <img src={props.src} alt=\"Desktop\" />;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/availablenetworks.1e5b6f9a.png\";","export default __webpack_public_path__ + \"static/media/connectedopennetwork.3add7549.png\";","export default __webpack_public_path__ + \"static/media/connectedsecurenetwork.16346748.png\";","export default __webpack_public_path__ + \"static/media/discoverableonnetwork.f641c86c.png\";","export default __webpack_public_path__ + \"static/media/desktopnetworknotconnected.1d992857.png\";","export default __webpack_public_path__ + \"static/media/pressonopennetwork.218e43b6.png\";","export default __webpack_public_path__ + \"static/media/pressonsecurenetwork.166db23d.png\";","export default __webpack_public_path__ + \"static/media/typeinpassword.c41db31f.png\";","import { AppDispatch } from '../store';\r\nimport task1data from './task1';\r\nimport task2data from './task2';\r\n\r\nexport interface TaskData {\r\n  title:string;\r\n  screens: {[key: string]: ScreenData};\r\n  description: string;\r\n}\r\n\r\nexport interface ScreenData {\r\n  component: React.ReactNode;\r\n  buttons: {\r\n    position: { top: number | string; left: number | string };\r\n    size: { width: number | string; height: number | string };\r\n    onClick?: (dispatch: AppDispatch) => void;\r\n  }[];\r\n}\r\n\r\nconst gameTasks: { [taskId: string]: TaskData } = {\r\n  1: task1data,\r\n  2: task2data\r\n};\r\nexport default gameTasks;\r\n","import { TaskData } from '.';\r\nimport { fromUrl } from '../components/AppImage';\r\nimport { gameActions } from 'store/game';\r\n\r\nimport availablenetworks from 'assets/tasks/1/availablenetworks.png';\r\nimport connectedopennetwork from 'assets/tasks/1/connectedopennetwork.png';\r\nimport connectedsecurenetwork from 'assets/tasks/1/connectedsecurenetwork.png';\r\nimport discoverableonnetwork from 'assets/tasks/1/discoverableonnetwork.png';\r\nimport desktopnetworknotconnected from 'assets/tasks/1/desktopnetworknotconnected.png';\r\nimport pressonopennetwork from 'assets/tasks/1/pressonopennetwork.png';\r\nimport pressonsecurenetwork from 'assets/tasks/1/pressonsecurenetwork.png';\r\nimport typeinpassword from 'assets/tasks/1/typeinpassword.png';\r\n\r\nconst task1data: TaskData = {\r\n  title:'Internet Connection',\r\n  description:'Connect safely to the internet',\r\n  screens: {\r\n    desktopnetworknotconnected: {\r\n      component: fromUrl(desktopnetworknotconnected),\r\n      buttons: [\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'availablenetworks'}));\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    availablenetworks: {\r\n      component: fromUrl(availablenetworks),\r\n      buttons: [\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n        {\r\n          position: {left: '77%', top: '28%'},\r\n          size: {width: '22%', height: '8%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonopennetwork'}));\r\n          },\r\n        },\r\n        {\r\n          position: {left: '77%', top: '36%'},\r\n          size: {width: '22%', height: '8%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonsecurenetwork'}));\r\n          },\r\n        }\r\n      ],\r\n    },\r\n    pressonsecurenetwork: {\r\n      component: fromUrl(pressonsecurenetwork),\r\n      buttons: [\r\n          //network icon in desktop bar\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n          //connect button\r\n        {\r\n          position: {top: '48.5%', left: '89.5%'},\r\n          size: {width: '9.5%', height: '4%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'typeinpassword'}));\r\n          }\r\n        },\r\n          //open network button\r\n        {\r\n          position: {top: '28.1%', left: '76.4%'},\r\n          size: {width: '24%', height: '8%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonopennetwork'}));\r\n          }\r\n        },\r\n      ]\r\n    },\r\n    pressonopennetwork: {\r\n      component: fromUrl(pressonopennetwork),\r\n      buttons: [\r\n          //network icon in desktop bar\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n          //secure network button\r\n        {\r\n          position: {left: '76.6%', top: '50.9%'},\r\n          size: {width: '24%', height: '8%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonsecurenetwork'}));\r\n          },\r\n        },\r\n          //connect button\r\n        {\r\n          position: {left: '89.5%', top: '45.45%'},\r\n          size: {width: '9.5%', height: '3.5%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id:'connectedopennetwork'}));\r\n          }\r\n        },\r\n      ]\r\n    },\r\n    typeinpassword: {\r\n      component: fromUrl(typeinpassword),\r\n      buttons: [\r\n        //network icon in desktop bar\r\n        {\r\n          position: {left: '92%', top: '94.5%'},\r\n          size: {width: '2%', height: '4%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'desktopnetworknotconnected'}));\r\n          },\r\n        },\r\n        //open network button\r\n        {\r\n          position: {top: '28.1%', left: '76.4%'},\r\n          size: {width: '24%', height: '8%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonopennetwork'}));\r\n          }\r\n        },\r\n        //next button (after password entered)\r\n        {\r\n          position: {top: '52.1%', left: '79.7%'},\r\n          size: {width: '9.7%', height: '3.8%'},\r\n          onClick: (dispatch)=> {\r\n            dispatch(gameActions.setActiveScreenId({id: 'discoverableonnetwork'}));\r\n          }\r\n        },\r\n      ],\r\n    },\r\n    connectedopennetwork: {\r\n      component:fromUrl(connectedopennetwork),\r\n      buttons:[\r\n        //secure network button\r\n        {\r\n          position: {left: '76.6%', top: '46.17%'},\r\n          size: {width: '24%', height: '8%'},\r\n          onClick: (dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'pressonsecurenetwork'}));\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    connectedsecurenetwork: {\r\n      component:fromUrl(connectedsecurenetwork),\r\n      buttons:[],\r\n    },\r\n    discoverableonnetwork: {\r\n      component:fromUrl(discoverableonnetwork),\r\n      buttons:[\r\n        {\r\n          position: {top: '59%', left: '79.7%'},\r\n          size: {width: '9.7%', height: '3.8%'},\r\n          onClick:(dispatch) => {\r\n            dispatch(gameActions.setActiveScreenId({id: 'connectedsecurenetwork'}));\r\n            dispatch(gameActions.toggleFeedbackDialog());\r\n          }\r\n        },\r\n        {\r\n          position: {top: '59%', left: '89.5%'},\r\n          size: {width: '9.7%', height: '3.8%'},\r\n          onClick:() => {window.alert('fail')}\r\n        }\r\n      ]\r\n    }\r\n  }\r\n};\r\n\r\nexport default task1data;\r\n","import {TaskData} from \"./index\";\nimport {fromUrl} from \"../components/AppImage\";\nimport antiviruspopup from \"../assets/tasks/2/antiviruspopup.png\";\n\nconst task2data: TaskData = {\n    title:'Antivirus',\n    description:'Deal appropriately with default antivirus',\n    screens: {\n        antiviruspopup: {\n            component: fromUrl(antiviruspopup),\n            buttons: [\n                // {\n                //     position: {left: '92%', top: '94.5%'},\n                //     size: {width: '2%', height: '4%'},\n                //     onClick: (dispatch) => {\n                //         dispatch(gameActions.setActiveScreenId({id: 'availablenetworks'}));\n                //     },\n                // },\n            ],\n        },\n    }\n}\nexport default task2data;","export default __webpack_public_path__ + \"static/media/antiviruspopup.98332630.png\";","import React, {useState} from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {AppDispatch, AppState} from '../store';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {gameActions} from \"../store/game\";\n\nconst DialogTitle = (props: {\n  text:string;\n  onConfirmation?: (dispatch: AppDispatch) => void;\n}) => {\n  return (\n      <MuiDialogTitle disableTypography className=\"MuiTypography-root MuiTypography-h6\" >\n        <Typography variant=\"h6\">{props.text}</Typography>\n      </MuiDialogTitle>\n  );\n};\n\nexport default function FeedbackDialog() {\n  const dispatch = useDispatch();\n  const gameState = useSelector((state: AppState) => state.game);\n  const onConfirmation = function() {\n      dispatch(gameActions.toggleFeedbackDialog())\n      dispatch(gameActions.setActiveTaskId({id: 2}));\n      dispatch(gameActions.setActiveScreenId({id: 'antiviruspopup'}));\n\n  }\n  return (\n    <div>\n      <Dialog open={gameState.showFeedbackDialog ? gameState.showFeedbackDialog : false}>\n        <DialogTitle text={'Task Feedback'}></DialogTitle>\n          <DialogActions>\n              <Button autoFocus onClick={onConfirmation} color=\"primary\">\n                 Go to next task\n              </Button>\n          </DialogActions>\n      </Dialog>\n\n    </div>\n  );\n}\n","import React, {useEffect} from 'react';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport gameItems, { ScreenData, TaskData } from 'game-data';\nimport Typography from '@material-ui/core/Typography';\nimport {useSelector} from \"react-redux\";\nimport {AppState} from \"../store\";\n\nfunction getSteps() {\n  const keys = Object.keys(gameItems).sort();\n  return keys.map(x => gameItems[x].title);\n}\n\nfunction getStepContent(step:number) {\n  return gameItems[step+1] ? gameItems[step+1].description : '';\n}\n\nexport default function VerticalStepper() {\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n\n  const gameState = useSelector((state: AppState) => state.game);\n  useEffect(() => {\n    let activeTaskId = gameState.activeTaskId ? gameState.activeTaskId : -1;\n    activeTaskId = parseInt(activeTaskId.toString());\n    console.log(activeTaskId)\n    if (activeTaskId != -1) {\n      setActiveStep(activeTaskId-1);\n    }\n\n  }, [gameState.activeTaskId,]);\n  return (\n      <div>\n        <Stepper activeStep={activeStep} orientation=\"vertical\">\n          {steps.map((label, index) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n                <StepContent>\n                  <Typography>{getStepContent(index)}</Typography>\n                </StepContent>\n              </Step>\n          ))}\n        </Stepper>\n      </div>\n  );\n\n}\n","import { Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React, { useEffect, useState } from 'react';\r\nimport ActionableImage from '../../components/ActionableImage';\r\nimport { AppState } from '../../store';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Buttons from './Buttons';\r\nimport { gameActions } from '../../store/game';\r\nimport gameItems, { ScreenData } from '../../game-data';\r\nimport FeedbackDialog from \"../../components/FeedbackDialog\";\r\nimport VerticalStepper from \"../../components/Stepper\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  imgContainer: {\r\n    margin: theme.spacing(8, 0, 3),\r\n  },\r\n  btnContainer: {\r\n    margin: theme.spacing(0),\r\n  },\r\n}));\r\n\r\nexport default function QuizGame() {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n  const gameState = useSelector((state: AppState) => state.game);\r\n\r\n  const [screenData, setScreenData] = useState(undefined as ScreenData | undefined);\r\n\r\n  useEffect(() => {\r\n    dispatch(gameActions.setActiveTaskId({ id: 1 }));\r\n    dispatch(gameActions.setActiveScreenId({ id: 'desktopnetworknotconnected' }));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setScreenData(\r\n      gameState.activeTaskId && gameState.activeScreenId\r\n        ? gameItems[gameState.activeTaskId].screens[gameState.activeScreenId]\r\n        : undefined\r\n    );\r\n  }, [gameState.activeTaskId, gameState.activeScreenId]);\r\n\r\n  if (!screenData) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={2}>\r\n        <VerticalStepper></VerticalStepper>\r\n      </Grid>\r\n      <Grid item xs={10} className={classes.imgContainer}>\r\n        <ActionableImage\r\n          component={screenData.component}\r\n          buttons={screenData.buttons}\r\n        />\r\n        <FeedbackDialog></FeedbackDialog>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from 'react';\nimport ActionableImage from './ActionableImage';\nimport { AppState } from '../store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { gameActions } from '../store/game';\nimport gameItems, { ScreenData, TaskData } from 'game-data';\n\nconst useStyles = makeStyles((theme) => ({\n  imgContainer: {\n    margin: theme.spacing(8, 0, 3),\n  },\n  btnContainer: {\n    margin: theme.spacing(0),\n  },\n}));\n\nexport default function ToolbarContent() {\n  // const dispatch = useDispatch();\n  const gameState = useSelector((state: AppState) => state.game);\n\n  const [taskDescription, setTaskDescription] = useState('');\n\n  const computeTaskDescription = (\n    activateTaskId: string | number,\n    taskData: TaskData\n  ) => {\n    const progressIndicator =\n        'task ' +\n        activateTaskId.toString() + ' of ' + Object.keys(gameItems).length;\n    const description = taskData?.description;\n    return progressIndicator + ': ' + description;\n  };\n\n  useEffect(() => {\n    setTaskDescription(\n      gameState.activeTaskId && gameState.activeScreenId\n        ? computeTaskDescription(\n          gameState.activeTaskId,\n            gameItems[gameState.activeTaskId]\n          )\n        : ''\n    );\n  }, [gameState.activeTaskId, gameState.activeScreenId]);\n\n  if (!taskDescription) {\n    return null;\n  }\n\n  return <div>{taskDescription}</div>;\n}\n","import {\r\n  AppBar,\r\n  Container,\r\n  CssBaseline,\r\n  ThemeProvider,\r\n  Toolbar,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport './styles/styles.css';\r\nimport theme from './theme';\r\nimport QuizGame from './views/QuizGame';\r\nimport ToolbarContent from './components/Toolbar';\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <ToolbarContent />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth=\"lg\">\r\n        <QuizGame />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction } from '@reduxjs/toolkit';\r\nimport { Action, combineReducers } from 'redux';\r\n\r\nimport game from './game';\r\n\r\nexport const rootReducer = combineReducers({\r\n  game,\r\n});\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type AppThunk = ThunkAction<void, AppState, unknown, Action<string>>;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(console.log);\r\n"],"sourceRoot":""}